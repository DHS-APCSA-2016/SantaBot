#BlueJ class context
comment0.params=
comment0.target=java.lang.String\ getGreeting()
comment0.text=\n\ getGreeting()\ is\ a\ method\ that\ returns\ SantaBot's\ greeting.\ Used\ in\ place\ of\ \n\ processor1()\ since\ SantaBot\ initiates\ the\ conversation.\n\ \n\ @return\ SantaBot's\ greeting\ as\ a\ String\n
comment1.params=statementArray\ lastReply
comment1.target=java.lang.String\ context(java.lang.String[],\ java.lang.Object)
comment1.text=\n\ context()\ checks\ both\ SantaBot's\ last\ reply\ and\ the\ user's\ input\ and\ returns\ a\n\ reply\ based\ on\ both\ of\ them\ (e.g.\ if\ the\ user\ replies\ to\ SantaBot's\ question).\n\ \n\ @param\ String[]\ statementArray;\ the\ user's\ input\ in\ the\ form\ of\ an\ array\n\ @param\ Object\ lastReply;\ SantaBot's\ last\ reply\n\ \n\ @return\ SantaBot's\ response\ as\ a\ String,\ or\ an\ empty\ string\ to\ indicate\ to\ \n\ processor1()\ that\ it\ couldn't\ get\ a\ special\ response\n
comment10.params=statementArray
comment10.target=java.lang.String[]\ transform2(java.lang.String[])
comment10.text=\n\ transform2()\ works\ alongside\ transform1(),\ turning\ all\ first-person\ words\ to\n\ second-person.\n\ \n\ @param\ String[]\ statementArray;\ the\ array\ that\ transform2()\ looks\ at\n\ \n\ @return\ statementArray,\ the\ modified\ version\ of\ the\ input\n\ \n
comment2.params=statement\ lastReply
comment2.target=java.lang.String\ processor1(java.lang.String,\ java.lang.Object)
comment2.text=\n\ processor1()\ is\ the\ main\ method\ that\ runs\ SantaBot.\ It\ puts\ the\ user's\ input\ through\n\ cleanup()\ so\ that\ it's\ an\ array\ that\ can\ be\ dealt\ with\ more\ easily\ first,\ then\n\ checks\ if\ context()\ or\ transform()\ have\ any\ replies.\ It\ returns\ their\ output\ if\ they\n\ do,\ otherwise\ it'll\ just\ look\ through\ statementArray\ and\ makes\ SantaBot\ reply\ based\ on\ \n\ keywords\ or\ strings\ of\ keywords.\ If\ it\ can't\ find\ a\ keyword,\ then\ it\ returns\ \n\ getRandomResponse()'s\ output\ (i.e.\ it\ returns\ a\ random\ reply).\n\ \n\ @param\ String\ statement;\ the\ user's\ input\ in\ its\ raw\ form\n\ @param\ Object\ lastReply;\ SantaBot's\ last\ reply\ to\ the\ user,\ used\ to\ put\ it\ into\ context()\n\ \n\ @return\ SantaBot's\ response\ as\ a\ String,\ based\ on\ all\ of\ the\ criteria\n
comment3.params=str
comment3.target=java.lang.String[]\ cleanup(java.lang.String)
comment3.text=\n\ cleanup()\ makes\ the\ user's\ input\ lowercased,\ takes\ out\ the\ punctuation,\ and\ \n\ converts\ it\ into\ an\ array.\ This\ is\ to\ make\ the\ user\ input\ easier\ to\ deal\ with\ \n\ (erratic\ capitalisation\ can\ make\ it\ a\ lot\ harder\ for\ a\ chatbot\ to\ detect\ without\n\ lowercasing\ everything,\ accounting\ for\ punctuation\ in\ if\ statements\ will\ be\ \n\ tedious\ without\ removing\ it,\ and\ having\ it\ as\ an\ array\ means\ avoiding\ the\ problem\n\ of\ words\ with\ other\ words\ in\ them,\ like\ "no"\ in\ "know").\n\ \n\ @param\ String\ str;\ the\ string\ that\ will\ be\ modified\n\ \n\ @return\ strarray,\ a\ String\ array\ which\ is\ the\ cleaned-up\ version\ of\ str\n
comment4.params=
comment4.target=java.lang.String\ getRandomResponse()
comment4.text=\n\ getRandomResponse()\ uses\ an\ RNG\ to\ choose\ a\ random\ generic\ response/question\ if\n\ SantaBot\ fails\ to\ find\ a\ proper\ response\ to\ the\ user's\ input.\n\ \n\ @return\ a\ random\ response\ as\ a\ String\n
comment5.params=thing
comment5.target=java.lang.String\ stringConverter(java.lang.String[])
comment5.text=\n\ stringConverter()\ gets\ a\ String\ array\ and\ turns\ it\ into\ a\ String\ with\ spaces\ \n\ between\ all\ of\ the\ items.\ Made\ for\ changing\ sentences\ that\ are\ arrays\ into\ \n\ sentences\ that\ are\ Strings.\n\ \n\ @param\ String[]\ thing;\ a\ String\ array\n\ \n\ @return\ total,\ a\ String\ version\ of\ thing\n
comment6.params=arraything\ thing
comment6.target=boolean\ has(java.lang.String[],\ java.lang.String)
comment6.text=\n\ has()\ checks\ if\ an\ array\ has\ a\ certain\ item.\ Can\ technically\ be\ done\ with\ one\ line\n\ of\ code\ but\ this\ way\ it's\ a\ lot\ cleaner\ and\ easier\ to\ understand.\n\ \n\ @param\ String[]\ arraything;\ the\ given\ array\ that\ has()\ will\ search\ through\n\ @param\ String\ thing;\ the\ String\ that\ has()\ will\ look\ for\n\ \n\ @return\ true\ or\ false,\ depending\ on\ whether\ or\ not\ the\ array\ has\ the\ item\n
comment7.params=arraything\ thing
comment7.target=int\ arrIndexOf(java.lang.String[],\ java.lang.String)
comment7.text=\n\ arrIndexOf()\ checks\ the\ index\ of\ a\ certain\ item.\ Can\ technically\ be\ done\ with\ one\ \n\ line\ of\ code\ but\ this\ way\ it's\ a\ lot\ cleaner\ and\ easier\ to\ understand.\n\ \n\ @param\ String[]\ arraything;\ the\ array\ that\ arrIndexOf()\ will\ search\ through\n\ @param\ String\ thing;\ the\ String\ that\ arrIndexOf()\ will\ look\ for\n\ \n\ @return\ the\ index\ of\ thing\ in\ arraything,\ or\ -1\ if\ it\ isn't\ there.\n
comment8.params=afterCleanup
comment8.target=java.lang.String\ transformStatement(java.lang.String[])
comment8.text=\n\ transformStatement()\ transforms\ statements\ so\ that\ they\ address\ the\ speaker\ properly.\n\ \n\ @param\ afterCleanup;\ \n
comment9.params=theArray
comment9.target=java.lang.String\ transform1(java.lang.String[])
comment9.text=\n\ transform1()\ changes\ the\ user's\ input\ into\ a\ suitable\ output\ from\ SantaBot's\n\ perspective\ rather\ than\ the\ user's.\n\ \n\ @param\ String[]\ theArray;\ the\ array\ that\ transform1()\ transforms\n\ \n\ @return\ finalString,\ a\ String\ containing\ Santabot's\ answer,\ or\ just\ ""\ if\ there's\n\ nothing\ to\ transform\n
numComments=11
